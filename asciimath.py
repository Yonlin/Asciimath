#!/usr/bin/python
# coding: utf-8
import re
import sys

alnum=u'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'

# Sub and supscripts
sup=u"·µÉ·µá·∂ú·µà·µâ·∂†·µç ∞‚Å± ≤·µèÀ°·µê‚Åø·µí·µñ ≥À¢·µó·µò·µõ ∑À£ ∏·∂ª·¥¨·¥Æ·¥∞·¥±·¥≥·¥¥·¥µ·¥∂·¥∑·¥∏·¥π·¥∫·¥º·¥æ·¥ø·µÄ·µÅ‚±Ω·µÇ‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ‚Å∫‚Åª‚Åº‚ÅΩ‚Åæ·µÖ·µù·µû·µü·µã·∂ø·∂•·∂≤·µ†·µ°"
supn=u"abcdefghijklmnoprstuvwxyzABDEGHIJKLMNOPRTUVW0123456789+-=()Œ±Œ≤Œ≥Œ¥ŒµŒ∏ŒπŒ¶œÜœá"
supd={u'^%s'%k: v for k,v in zip(supn,sup)}

sub=u"‚Çê‚Çë‚Çï·µ¢‚Çñ‚Çó‚Çò‚Çô‚Çí‚Çö·µ£‚Çõ‚Çú·µ§·µ•‚Çì‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ‚Çä‚Çã‚Çå‚Çç‚Çé·µ¶·µß·µ®·µ©·µ™"
subn=u"aehiklmnoprstuvx0123456789+-=()Œ≤ŒπœÅœÜœá"
subd={u'_%s'%k: v for k,v in zip(subn,sub)}


# Mathematical symbols
mathd = {'\\infty': u'‚àû', '\\pd':      u'‚àÇ', '\\iint':     u'‚à¨',
         '\\iiint': u'‚à≠', '\\oiint':   u'‚àØ', '\\oiiint':   u'‚à∞',
         '\\int':   u'‚à´', '\\sum':     u'‚àë', '\\prod':     u'‚àè',
         '\\oint':  u'‚àÆ', '\\oo':      u'‚àû', '\\cap':      u'‚à©',
         '\\in':    u'‚àà', '\\exists':  u'‚àÉ', '\\nexists':  u'‚àÑ',
         '\\forall':u'‚àÄ', '\\empty':   u'‚àÖ', '\\laplace':  u'Œî',
         '\\nabla': u'‚àá', '\\ni':      u'‚àã', '\\!=':       u'‚â†',
         '\\<=':    u'‚â§', '\\>=':      u'‚â•', '\\+-':       u'¬±',
         '\\-+':    u'‚àì', '\\so':      u'‚à¥', '\\since':    u'‚àµ',
         '\\nni':   u'‚àå', '\\(+)':     u'‚äï', '\\(-)':      u'‚äñ',
         '\\(*)':   u'‚äó', '\\(/)':     u'‚äò', '\\(.)':      u'‚äô',
         '\\nin':   u'‚àâ', '\\perp':    u'‚ä•', '\\prop':     u'‚àù',
         '\\left':  u'‚áê', '\\iff':     u'‚áî', '\\right':    u'‚áí',
         '\\equiv': u'‚áî', '\\implies': u'‚áí', '\\limplies': u'‚áê',
         '\\sqrt':  u'‚àö', '\\wave':    u'‚àø', '\\div':      u'‚à£',
         '\\ndiv':  u'‚à§', '\\and':     u'‚àß', '\\or':       u'‚à®',
         '\\aleph': u'‚Ñµ', '\\beth':    u'‚Ñ∂', '\\approx':   u'‚âà',
         '\\sim':   u'‚âà', '\\not':     u'¬¨', '\\subset':   u'‚äÇ',
         '\\supset':u'‚äÉ', '\\union':   u'‚à™', '\\cup':      u'‚à™',
         '\\cap':   u'‚à©', '\\mapsto':  u'‚Ü¶', 
    }

escaped = {'\\_':   u'_', '\\^':       u'^', '\\\\':       u'\\'}

# Greek symbols
greekd ={'\\alpha': u'Œ±', '\\beta':    u'Œ≤', '\\gamma':    u'Œ≥',
         '\\delta': u'Œ¥', '\\epsilon': u'Œµ', '\\zeta':     u'Œ∂',
         '\\eta':   u'Œ∑', '\\theta':   u'Œ∏', '\\iota':     u'Œπ',
         '\\kappa': u'Œ∫', '\\lambda':  u'Œª', '\\mu':       u'Œº',
         '\\nu':    u'ŒΩ', '\\xi':      u'Œæ', '\\omicron':  u'Œø',
         '\\pi':    u'œÄ', '\\rho':     u'œÅ', '\\sigma':    u'œÉ',
         '\\tau':   u'œÑ', '\\upsilon': u'œÖ', '\\phi':      u'œÜ',
         '\\chi':   u'œá', '\\psi':     u'œà', '\\omega':    u'œâ',
         '\\Alpha': u'Œë', '\\Beta':    u'Œí', '\\Gamma':    u'Œì',
         '\\Delta': u'Œî', '\\Epsilon': u'Œï', '\\Zeta':     u'Œñ',
         '\\Eta':   u'Œó', '\\Theta':   u'Œó', '\\Iota':     u'Œô',
         '\\Kappa': u'Œö', '\\Lambda':  u'Œõ', '\\Mu':       u'Œú',
         '\\Nu':    u'Œù', '\\Xi':      u'Œû', '\\Omicron':  u'Œü',
         '\\Pi':    u'Œ†', '\\Rho':     u'Œ°', '\\Sigma':    u'Œ£',
         '\\Tau':   u'Œ§', '\\Upsilon': u'Œ•', '\\Phi':      u'Œ¶',
         '\\Chi':   u'Œß', '\\Psi':     u'Œ®', '\\Omega':    u'Œ©',
        }



letters= u'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'

types={
'bb': u'ùî∏ùîπ‚ÑÇùîªùîºùîΩùîæ‚ÑçùïÄùïÅùïÇùïÉùïÑ‚ÑïùïÜ‚Ñô‚Ñö‚Ñùùïäùïãùïåùïçùïéùïèùïê‚Ñ§ùïíùïìùïîùïïùïñùïóùïòùïôùïö‚Öâùïúùïùùïûùïüùï†ùï°ùï¢ùï£ùï§ùï•ùï¶ùïßùï®ùï©ùï™ùï´ùüòùüôùüöùüõùüúùüùùüûùüüùü†ùü°'
,
'bo': u'ùêÄùêÅùêÇùêÉùêÑùêÖùêÜùêáùêàùêâùêäùêãùêåùêçùêéùêèùêêùêëùêíùêìùêîùêïùêñùêóùêòùêôùêöùêõùêúùêùùêûùêüùê†ùê°ùê¢ùê£ùê§ùê•ùê¶ùêßùê®ùê©ùê™ùê´ùê¨ùê≠ùêÆùêØùê∞ùê±ùê≤ùê≥ùüéùüèùüêùüëùüíùüìùüîùüïùüñùüó'
,
'it': u'ùê¥ùêµùê∂ùê∑ùê∏ùêπùê∫ùêªùêºùêΩùêæùêøùëÄùëÅùëÇùëÉùëÑùëÖùëÜùëáùëàùëâùëäùëãùëåùëçùëéùëèùëêùëëùëíùëìùëî‚Ñéùëñùëóùëòùëôùëöùëõùëúùëùùëûùëüùë†ùë°ùë¢ùë£ùë§ùë•ùë¶ùëß'
,
'boit': u'ùë®ùë©ùë™ùë´ùë¨ùë≠ùëÆùëØùë∞ùë±ùë≤ùë≥ùë¥ùëµùë∂ùë∑ùë∏ùëπùë∫ùëªùëºùëΩùëæùëøùíÄùíÅùíÇùíÉùíÑùíÖùíÜùíáùíàùíâùíäùíãùíåùíçùíéùíèùíêùíëùííùíìùíîùíïùíñùíóùíòùíôùíöùíõ'
,
'sc': u'ùíú‚Ñ¨ùíûùíü‚Ñ∞‚Ñ±ùí¢‚Ñã‚Ñêùí•ùí¶‚Ñí‚Ñ≥ùí©ùí™ùí´ùí¨‚ÑõùíÆùíØùí∞ùí±ùí≤ùí≥ùí¥ùíµùí∂ùí∑ùí∏‚ÑØùíª‚ÑäùíΩùíæùíøùìÄùìÅùìÇùìÉ‚Ñ¥ùìÖùìÜùìáùìàùìâùìäùìãùìåùìçùìéùìè'
,
'bosc': u'ùìêùìëùìíùììùìîùìïùìñùìóùìòùìôùìöùìõùìúùìùùìûùìüùì†ùì°ùì¢ùì£ùì§ùìßùì®ùì©ùì™ùì´ùì¨ùì≠ùìÆùìØùì∞ùì±ùì≤ùì≥ùì¥ùìµùì∂ùì∑ùì∫ùìªùìºùìΩùìæùìøùîÄùîÅùîÇùîÉ'
,
'fr': u'ùîÑùîÖ‚Ñ≠ùîáùîàùîâùîä‚Ñå‚Ñëùîçùîéùîèùîêùîëùîíùîìùîî‚Ñúùîñùîóùîòùîôùîöùîõùîú‚Ñ®ùîûùîüùî†ùî°ùî¢ùî£ùî§ùî•ùî¶ùîßùî®ùî©ùî™ùî´ùî¨ùî≠ùîÆùîØùî∞ùî±ùî≤ùî≥ùî¥ùîµùî∂ùî∑'
,
'dost': u'ùî∏ùîπ‚ÑÇùîªùîºùîΩùîæ‚ÑçùïÄùïÅùïÇùïÉùïÑ‚ÑïùïÜ‚Ñô‚Ñö‚Ñùùïäùïãùïåùïçùïéùïèùïê‚Ñ§ùïíùïìùïîùïïùïñùïóùïòùïôùïöùïõùïúùïùùïûùïüùï†ùï°ùï¢ùï£ùï§ùï•ùï¶ùïßùï®ùï©ùï™ùï´'
,
'bofr': u'ùï¨ùï≠ùïÆùïØùï∞ùï±ùï≤ùï≥ùï¥ùïµùï∂ùï∑ùï∏ùïπùï∫ùïªùïºùïΩùïæùïøùñÄùñÅùñÇùñÉùñÑùñÖùñÜùñáùñàùñâùñäùñãùñåùñçùñéùñèùñêùñëùñíùñìùñîùñïùññùñóùñòùñôùñöùñõùñúùñùùñûùñü'
,
'ss': u'ùñ†ùñ°ùñ¢ùñ£ùñ§ùñ•ùñ¶ùñßùñ®ùñ©ùñ™ùñ´ùñ¨ùñ≠ùñÆùñØùñ∞ùñ±ùñ≤ùñ≥ùñ¥ùñµùñ∂ùñ∑ùñ∏ùñπùñ∫ùñªùñºùñΩùñæùñøùóÄùóÅùóÇùóÉùóÑùóÖùóÜùóáùóàùóâùóäùóãùóåùóçùóéùóèùóêùóëùóíùóìùü¢ùü£ùü§ùü•ùü¶ùüßùü®ùü©ùü™ùü´'
,
'ssbo': u'ùóîùóïùóñùóóùóòùóôùóöùóõùóúùóùùóûùóüùó†ùó°ùó¢ùó£ùó§ùó•ùó¶ùóßùó®ùó©ùó™ùó´ùó¨ùó≠ùóÆùóØùó∞ùó±ùó≤ùó≥ùó¥ùóµùó∂ùó∑ùó∏ùóπùó∫ùóªùóºùóΩùóæùóøùòÄùòÅùòÇùòÉùòÑùòÖùòÜùòáùü¨ùü≠ùüÆùüØùü∞ùü±ùü≤ùü≥ùü¥ùüµ'
,
'ssit': u'ùòàùòâùòäùòãùòåùòçùòéùòèùòêùòëùòíùòìùòîùòïùòñùòóùòòùòôùòöùòõùòúùòùùòûùòüùò†ùò°ùò¢ùò£ùò§ùò•ùò¶ùòßùò®ùò©ùò™ùò´ùò¨ùò≠ùòÆùòØùò∞ùò±ùò≤ùò≥ùò¥ùòµùò∂ùò∑ùò∏ùòπùò∫ùòª'
,
'ssboit': u'ùòºùòΩùòæùòøùôÄùôÅùôÇùôÉùôÑùôÖùôÜùôáùôàùôâùôäùôãùôåùôçùôéùôèùôêùôëùôíùôìùôîùôïùôñùôóùôòùôôùôöùôõùôúùôùùôûùôüùô†ùô°ùô¢ùô£ùô§ùô•ùô¶ùôßùô®ùô©ùô™ùô´ùô¨ùô≠ùôÆùôØ'
,
'ms': u'ùô∞ùô±ùô≤ùô≥ùô¥ùôµùô∂ùô∑ùô∏ùôπùô∫ùôªùôºùôΩùôæùôøùöÄùöÅùöÇùöÉùöÑùöÖùöÜùöáùöàùöâùöäùöãùöåùöçùöéùöèùöêùöëùöíùöìùöîùöïùöñùöóùöòùöôùööùöõùöúùöùùöûùöüùö†ùö°ùö¢ùö£ùü∂ùü∑ùü∏ùüπùü∫ùüªùüºùüΩùüæùüø'
,
}

symbd = {}

symbd.update(greekd)
symbd.update(mathd)
symbd.update(supd)
symbd.update(subd)
for k,v in types.items():
    symbd.update({ (u'\\%s%s' % (k,n), s) for n,s in zip(alnum,v)})

testdict = symbd.copy()
testdict.update(escaped)
symbd = dict((re.escape(k),v) for k,v in symbd.iteritems())
escaped = dict((re.escape(k), v) for k,v in escaped.iteritems())
# To avoid \int getting parsed as (\in)t the regex will be 
# created from the revere alphanumeric sorting of the keys
symkey = sorted(symbd.keys(), reverse=True)
symkey = escaped.keys() + symkey
symbd.update(escaped)

pattern = re.compile(ur"(%s)" % "|".join(symkey),re.UNICODE)


def available():
    items=greekd.items()
    items=sorted(items,key=lambda x: x[0])

    print "Greek letters\n"
    for k,v in items:
        print u'%-10s | %s'%(k,v)

    items=mathd.items()
    items=sorted(items,key=lambda x: x[1])
    print '\nMathematical symbols\n'
    for k,v in items:
        print u'%-10s | %s'%(k,v)

    print u"\nSubscriptable _?: %s" % sub
    print u'Supscriptable ^?: %s' % sup
    print u"\nAlphanumerical symbols\n bo: bold, it: italic, sc: script, fr: fraktur, dost: double-struck, ss: sans-serif, ms: mono-space"

    items=types.items()
    items=sorted(items,key=lambda x: x[0])
    for k,v in items:
        print u'\\%-10s: %s'%(k,v)

def test():
    for k,v in testdict.items():
        if utf8ify(k) != v:
            print u"failed %s -> %s != %s"%(k,utf8ify(esc),v)

desc=u"""
Convert plain-text math to unicode

examples:
    $ asciimath '\\intf_1(x)f_2(x)d\\mu'
    ‚à´f‚ÇÅ(x)f‚ÇÇ(x)dŒº

    $ asciimath 'cos(\\pi) = -1'
    cos(œÄ) = -1

    $ asciimath 'q\\in\\bbB \\right q\\in\\bbR'
    q‚àà‚Ñö ‚áí q‚àà‚Ñù

    $ asciimath 'a^\\alpha = \\tau'
    a·µÖ = œÑ

    $ asciimath 'x^a \\^a'
    x·µÉ ^a

unicode-limitations:
    very few greek symbols are possible to sup and subscript
           supscriptable:  Œ± Œ≤ Œ≥ Œ¥ Œµ Œ∏ Œπ Œ¶ œÜ œá
           subscriptable:  Œ≤ Œπ œÅ œÜ œá

    Capital letters are not possible to subscript at all
    Supscriptable capitals: A B D E G H I J K L M N O P R T U V W

    """
def utf8ify(text):
    return pattern.sub(lambda m: symbd[re.escape(m.group(0))], text)



if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description=desc,formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-a','--all', help='Print all available symbols',action='store_true')
    parser.add_argument('-d','--debug',action='store_true')
    parser.add_argument('text', help='Text to convert',nargs='*')

    args = parser.parse_args()

    if args.all:
        available()
    elif args.debug:
        test()
    elif not args.text:
        parser.print_help()
    else:
        print utf8ify(u'\n'.join(args.text ))
    sys.exit()

